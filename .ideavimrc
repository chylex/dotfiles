set ignorecase
set incsearch
set number
set nrformats-=octal
set relativenumber
set scrolloff=999
set showcmd
set showmode
set sidescrolloff=999
set smartcase
set virtualedit=onemore
set visualbell

" Use WSL bash as shell
if has('win32')
  set shell=bash.exe
  set shellcmdflag=-lic
  set shellxquote=
endif

" Configure IDEA settings (https://github.com/JetBrains/ideavim/wiki/set-commands)
set ideaglobalmode
set ideajoin
set idearefactormode=visual

" Configure IDE keybindings (https://github.com/JetBrains/ideavim/wiki/sethandler)
sethandler <C-A> a:ide
sethandler <C-B> a:ide
sethandler <C-C> a:ide
sethandler <C-E> a:ide
sethandler <C-F> a:ide
sethandler <C-G> a:ide
sethandler <C-I> a:ide
sethandler <C-J> a:ide
sethandler <C-K> a:ide
sethandler <C-L> a:ide
sethandler <C-M> a:ide
sethandler <C-R> a:ide
sethandler <C-S> a:ide
sethandler <C-T> a:ide
sethandler <C-V> a:ide
sethandler <C-X> a:ide
sethandler <C-Y> a:ide
sethandler <C-\> a:ide

sethandler <A-H> a:vim
sethandler <A-L> a:vim
sethandler <A-P> a:vim
sethandler <A-X> a:vim
sethandler <C-D> a:vim
sethandler <C-I> a:vim
sethandler <C-N> a:vim
sethandler <C-O> a:vim
sethandler <C-P> a:vim
sethandler <C-U> a:vim
sethandler <C-W> a:vim

" Enable plugins (https://github.com/JetBrains/ideavim/wiki/IdeaVim-Plugins)
Plug 'argtextobj.vim'
Plug 'nerdtree'
Plug 'vim-ReplaceWithRegister'
Plug 'vim-exchange'
Plug 'vim-highlightedyank'
Plug 'vim-indent-object'
Plug 'vim-matchit'
Plug 'vim-multiple-cursors'
Plug 'vim-surround'
Plug 'vim-textobj-entire'

" https://vimhelp.org/index.txt.html

" Map top row on Czech keyboard layout to digits
map + 1
map ě 2
map š 3
map č 4
map ř 5
map ž 6
map ý 7
map á 8
map í 9
map é 0

" Move some commands closer on Czech keyboard layout
nnoremap ú @@
noremap ů ;
map § %

" Camel humps
noremap L [w
noremap H [b

" Navigate to end of previous word
nnoremap <A-b> ge
nnoremap <A-S-b> gE

" Navigate and close tabs
noremap <A-h> gT
noremap <A-l> gt
noremap <C-w> :action CloseContent<CR>

" Increment/decrement numbers
nnoremap <Space>+ <C-a>
nnoremap <Space>- <C-x>

" Edit from cursor to start/end of parenthesized block
nnoremap c) c])
nnoremap d) d])
nnoremap c( c[((
nnoremap d( c[((<ESC>l

" Delete lines
nnoremap C cc
nnoremap D dd
vnoremap C cc
vnoremap D dd

" Enter visual block mode
nnoremap <Space>v <C-V>
onoremap <Space>v <C-V>

" Indent keeping selection
vnoremap < <gv
vnoremap > >gv
vnoremap = =gv

" Turn capital letters into opposite actions
" nnoremap U :redo<CR> " Handled by custom version of IdeaVim

" Reselect pasted text
nnoremap gp `[v`]

" Put without yank
xmap p gr

" Show parameter info
nmap <A-p> <Action>(ParameterInfo)
imap <A-p> <Action>(ParameterInfo)

" Rebind commands that will be repurposed
nnoremap GG G
nnoremap dG dG
nnoremap cG cG
nnoremap M m
nnoremap Z z
noremap \\ <C-w>
noremap <A-S-n> <A-p>

" Repurpose 'Enter' for statement completion (renaming function requires a custom version of IdeaVIM)
function! CompleteStatement()
  if (renaming())
    " TODO https://github.com/JetBrains/ideavim/discussions/397#discussioncomment-1573048
    " return "\<Enter>"
    return "<Enter>"
  else
    action EditorCompleteStatement
    return ""
  endif
endfunction

nmap <expr> <Enter> CompleteStatement()

" Repurpose special characters for navigation
nmap ( :raction GotoPreviousError<CR>
nmap ) :raction GotoNextError<CR>
nmap [ :raction MethodUp<CR>
nmap ] :raction MethodDown<CR>
nmap { :raction JumpToLastChange<CR>
nmap } :raction JumpToNextChange<CR>

" Repurpose 'g' for navigation (:raction requires a custom version of IdeaVIM)
nmap gb :raction GotoNextBookmark<CR>
nmap gB :raction GotoPreviousBookmark<CR>
nmap gd :action GotoDeclaration<CR>
nmap gD :action GotoTypeDeclaration<CR>
nmap ge :raction VcsShowNextChangeMarker<CR>
nmap gE :raction VcsShowPrevChangeMarker<CR>
nmap gi :action GotoImplementation<CR>
map gj :raction EditorCloneCaretBelow<CR>
map gk :raction EditorCloneCaretAbove<CR>
nmap gr :action RecentLocations<CR>
nmap gR :action RecentChangedFiles<CR>
nmap gs :action GotoSuperMethod<CR>
nmap gS :action ShowSiblings<CR>
nmap gT /\\<class\>\\\|\\<interface\>\\\|\\<enum\>\\\|\\<object\>\\\|\\<record\>\\\|\\<struct\>\\\|\\<trait\><CR>w:nohlsearch<CR>
nmap gt gggT
nmap gu :action ShowUsages<CR>
nmap gU :action FindUsages<CR>
map gz :action NextSplitter<CR>
map gZ :action PrevSplitter<CR>

" Make bidirectional 'g' commands work with 'G' too
nmap Gb gb
nmap GB gB
nmap Ge ge
nmap GE gE
map Gj gj
map Gk gk
nmap Gt gt
nmap GT gT
map Gz gz
map GZ gZ

" Repurpose 'z' for view actions, debugger, and tab management
map za :action Annotate<CR>
map zb :action ViewBreakpoints<CR>
map zc :action EditorContextInfo<CR>
map zd :action QuickJavaDoc<CR>
map ze :action ShowErrorDescription<CR>
map zf :action SelectInProjectView<CR>

map zht :action TypeHierarchy<CR>
map zhm :action MethodHierarchy<CR>
map zhc :action CallHierarchy<CR>

map zm :action ShowBookmarks<CR>
map zp :action QuickImplementations<CR>
map zP :action QuickTypeDefinition<CR>

map zqa :action CloseAllEditors<CR>
map zqh :action CloseAllToTheLeft<CR>
map zql :action CloseAllToTheRight<CR>
map zqo :action CloseAllEditorsButActive<CR>
map zqq :action CloseContent<CR>
map zqu :action ReopenClosedTab<CR>

map zr :action RunToCursor<CR>
map zR :action ForceRunToCursor<CR>

map zsd :action MoveTabDown<CR>
map zsr :action MoveTabRight<CR>
map zsu :action Unsplit<CR>
map zsU :action UnsplitAll<CR>

map zt :action ExpressionTypeInfo<CR>
map zx :action EvaluateExpression<CR>

" Repurpose 'm' for refactoring (normal mode)
nmap mg :action Generate<CR>
nmap mi :action Inline<CR>
nmap mn :action RenameElement<CR>
nmap mo :action OverrideMethods<CR>
nmap ms :action ChangeSignature<CR>
nmap mS :action NewScratchFile<CR>

" Repurpose 'm' for refactoring (normal / visual mode)
nmap mc :action IntroduceConstant<CR>
vmap mc :action IntroduceConstant<CR>
nmap mf :action IntroduceField<CR>
vmap mf :action IntroduceField<CR>
nmap mm :action ExtractMethod<CR>
vmap mm :action ExtractMethod<CR>
nmap mM :action ExtractFunction<CR>
vmap mM :action ExtractFunction<CR>
nmap mp :action IntroduceParameter<CR>
vmap mp :action IntroduceParameter<CR>
nmap mP :action IntroduceProperty<CR>
vmap mP :action IntroduceProperty<CR>
nmap mr :action Refactorings.QuickListPopupAction<CR>
vmap mr :action Refactorings.QuickListPopupAction<CR>
nmap mv :action IntroduceVariable<CR>
vmap mv :action IntroduceVariable<CR>

" Actions for custom version of AceJump
set acejump
map <Space><Space> :action AceVimAction_JumpAllEditors<CR>
map <Space>f :action AceVimAction_JumpForward<CR>
map <Space>F :action AceVimAction_JumpBackward<CR>
map <Space>t :action AceVimAction_JumpTillForward<CR>
map <Space>T :action AceVimAction_JumpTillBackward<CR>
map <Space>l :action AceVimAction_JumpOnLineForward<CR>
map <Space>h :action AceVimAction_JumpOnLineBackward<CR>
map <Space>j :action AceVimAction_JumpLineIndentsForward<CR>
map <Space>k :action AceVimAction_JumpLineIndentsBackward<CR>
map <Space>w :action AceVimAction_JumpLWordForward<CR>
map <Space>W :action AceVimAction_JumpUWordForward<CR>
map <Space>b :action AceVimAction_JumpLWordBackward<CR>
map <Space>B :action AceVimAction_JumpUWordBackward<CR>
map <Space>e :action AceVimAction_JumpLWordEndForward<CR>
map <Space>E :action AceVimAction_JumpUWordEndForward<CR>
map <Space><A-b>   :action AceVimAction_JumpLWordEndBackward<CR>
map <Space><A-S-b> :action AceVimAction_JumpUWordEndBackward<CR>
